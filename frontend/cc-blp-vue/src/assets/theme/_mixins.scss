/*!
 * (c) 2022 CARIAD SE, All rights reserved.
 *
 * NOTICE:
 * All the information and materials contained herein, including the intellectual and technical concepts,
 * are the property of CARIAD SE and may be covered by patents, patents in process, and are protected by trade secret and/or copyright law.
 * The copyright notice above does not evidence any actual or intended publication or disclosure of this source code, which includes information and materials
 * that are confidential and/or proprietary and trade secrets of CARIAD SE.
 * Any reproduction, dissemination, modification, distribution, public performance, public display of or any other use of this source code and/or any other
 * information and/or material contained herein without the prior written consent of CARIAD SE is strictly prohibited and in violation of applicable laws.
 * The receipt or possession of this source code and/or related information does not convey or imply any rights to reproduce, disclose or distribute its
 * contents or to manufacture, use or sell anything that it may describe in whole or in part.
 */

@use 'variables';

@mixin background-image($name) {
  background-image: url('@/assets/images/icons/#{$name}.svg');
}

/**
 * Formats a vertical centered icon
 * Expected mark up
 * <div>
 *   <div class="icon-wrapper">
 *     <div class="icon"></div>
 *   </div>
 * </div>
 * Outer div container needs
 *        postion: relative;
 * It is added by mixin
 *
 * Parameter
 *     iconName: Supported icon name. See list below
 *     position: left or right
 *     horizontalPadding: inserted into left or right rule
 */
@mixin vertical-centered-icon($iconName, $position: left, $horizontalPadding: 0) {
  & {
    position: relative;
  }
  .icon-wrapper {
    /* Adjust icon size */
    $width: 12px;
    $height: 12px;
    @if $iconName ==
      variables.$ic-arrow-down or
      $iconName ==
      variables.$ic-arrow-up or
      $iconName ==
      variables.$datatable-responsecode-filter-inactive or
      $iconName ==
      variables.$datatable-responsecode-filter-active
    {
      $width: 24px;
      $height: 24px;
    } @else if
      $iconName ==
      variables.$ic_sort_asc or
      $iconName ==
      variables.$ic-tick-white or
      $iconName ==
      variables.$ic-tick-black or
      $iconName ==
      variables.$ic-sort-asc or
      $iconName ==
      variables.$ic-sort-desc or
      $iconName ==
      variables.$ic-radiobutton or
      $iconName ==
      variables.$ic-radiobutton-selected or
      $iconName ==
      variables.$ic-checkbox or
      $iconName ==
      variables.$ic-checkbox-selected
    {
      $width: 12px;
      $height: 12px;
    } @else {
      @error "Unknown icon '#{$iconName}'. Please check mixin 'vertical-centered-icon' for supported icons.";
    }

    position: absolute;
    top: 0;
    display: flex;
    -webkit-justify-content: center;
    justify-content: center;
    width: $width;
    height: 100%;
    text-align: center;
    vertical-align: middle;
    -webkit-box-pack: center;
    -ms-flex-pack: center;

    /** Position left or right with given offset */
    @if $position == right {
      right: $horizontalPadding;
    } @else if $position == left {
      left: $horizontalPadding;
    } @else {
      @error "Invalid icon position. Use keywords 'left' or 'right'";
    }

    @include __vertical-centered-icon-inner($iconName, $width, $height);
  }
}

/**
 * private mixin. used by vertical-centered-icon
 */
@mixin __vertical-centered-icon-inner($iconName, $width, $height) {
  .icon {
    @include background-image($iconName);

    position: relative;
    top: 50%;
    display: inline-block;
    width: $width;
    height: $height;
    padding: 0;
    margin-top: -50%;
    background-repeat: no-repeat;
    border: none;
  }
}

// mixins for new design:

@mixin shadowed($level: 1 /* allowed levels: 1-4 */) {
  box-shadow: 0 0 ($level * 4px) 0 rgba(0, 0, 0, 0.1);
}

@for $i from 0 to 5 {
  .shadowed-#{$i} {
    @include shadowed($i);
  }
}

// Deprecated, use _border.scss instead.
@mixin rounded($size: 'md') {
  @if $size == 'lg' {
    border-radius: 20px;
  } @else if $size == 'sm' {
    border-radius: 2px;
  } @else {
    border-radius: 8px;
  }
}

@mixin badge-style($border-color, $background-color) {
  border: 1px solid $border-color;
  background: lighten($background-color, 30%);
}
